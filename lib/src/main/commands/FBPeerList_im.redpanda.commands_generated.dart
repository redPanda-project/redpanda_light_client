// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_local_variable

library im.redpanda.commands;

import 'dart:typed_data' show Uint8List;

import 'package:flat_buffers/flat_buffers.dart' as fb;

class FBPeerList {
  FBPeerList._(this._bc, this._bcOffset);

  factory FBPeerList(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FBPeerList> reader = const _FBPeerListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<FBPeer> get peers => const fb.ListReader<FBPeer>(FBPeer.reader).vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'FBPeerList{peers: $peers}';
  }
}

class _FBPeerListReader extends fb.TableReader<FBPeerList> {
  const _FBPeerListReader();

  @override
  FBPeerList createObject(fb.BufferContext bc, int offset) => new FBPeerList._(bc, offset);
}

class FBPeerListBuilder {
  FBPeerListBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addPeersOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FBPeerListObjectBuilder extends fb.ObjectBuilder {
  final List<FBPeerObjectBuilder> _peers;

  FBPeerListObjectBuilder({
    List<FBPeerObjectBuilder> peers,
  }) : _peers = peers;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int peersOffset = _peers?.isNotEmpty == true
        ? fbBuilder.writeList(_peers.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    if (peersOffset != null) {
      fbBuilder.addOffset(0, peersOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}

class FBPeer {
  FBPeer._(this._bc, this._bcOffset);

  factory FBPeer(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FBPeer> reader = const _FBPeerReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int> get nodeId => const fb.ListReader<int>(const fb.Int8Reader()).vTableGet(_bc, _bcOffset, 4, null);

  String get ip => const fb.StringReader().vTableGet(_bc, _bcOffset, 6, null);

  int get port => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);

  @override
  String toString() {
    return 'FBPeer{nodeId: $nodeId, ip: $ip, port: $port}';
  }
}

class _FBPeerReader extends fb.TableReader<FBPeer> {
  const _FBPeerReader();

  @override
  FBPeer createObject(fb.BufferContext bc, int offset) => new FBPeer._(bc, offset);
}

class FBPeerBuilder {
  FBPeerBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addNodeIdOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addIpOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addPort(int port) {
    fbBuilder.addInt32(2, port);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FBPeerObjectBuilder extends fb.ObjectBuilder {
  final List<int> _nodeId;
  final String _ip;
  final int _port;

  FBPeerObjectBuilder({
    List<int> nodeId,
    String ip,
    int port,
  })  : _nodeId = nodeId,
        _ip = ip,
        _port = port;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int nodeIdOffset = _nodeId?.isNotEmpty == true ? fbBuilder.writeListInt8(_nodeId) : null;
    final int ipOffset = fbBuilder.writeString(_ip);

    fbBuilder.startTable();
    if (nodeIdOffset != null) {
      fbBuilder.addOffset(0, nodeIdOffset);
    }
    if (ipOffset != null) {
      fbBuilder.addOffset(1, ipOffset);
    }
    fbBuilder.addInt32(2, _port);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
